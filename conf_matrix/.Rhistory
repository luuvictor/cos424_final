library(plyr)
library(ggplot2)
library(reshape2)
genres=c('classical', 'classicrock', 'ubstep', 'jazz', 'metal')
attnames <- names(df)[3:length(names(df))]
setwd('COS424//Assignment2//')
#Trains on data and demos the function
MC_demo <- function(withhold=0) {
# read data in
df = read.csv('all_atts.txt', as.is=T)
# replace -1 and 0 with NA, since those are data points that don't exist
idx <- which(df == -1 | df == 0)
len <- length(df[,1])
remainder <- function(int) return(c(int%/%len, int%%len))
idx <- sapply(idx, remainder)
for(i in 1:length(idx[1,])){
# print(df[idx[2,i],idx[1,i]+1]) #test statement (before change)
df[idx[2,i],idx[1,i]+1] <- NA
# print(df[idx[2,i],idx[1,i]+1]) #test statement (after change)
}
# show the data structure
df[1,]
attnames <- names(df)[3:length(names(df))]
# make the training set and test set
bundle <- test.train(df, ntest=500)
train <- bundle$train
test <- bundle$test
# show the dimension of each set
dim(train)
dim(test)
# calculate the class proportions
class.prop <- table(df[,"genre"])
class.prop <- class.prop / sum(class.prop)
# calculate the posterior distribution for each
right = 0
wrong = 0
questionable = c()
has.nas = c()
best <- c() #I'm sorry for doing this. I'm going to augment this list with every iteration. Maybe it doesn't :(
for (s in rownames(test))
{
data <- test[s,3:8]
if(max(is.na(data))==1) {
has.nas = c(has.nas,s)
next # skip entires with any NAs in them
}
log_probs <- classify.song(data,train)
guess <- genres[which(log_probs == max(log_probs))]
if (length(guess) > 1) guess <- sample(guess, 1) #in case there are two that tie, just pick randomly
log_probs[paste('g.',guess,sep='')] <- min(log_probs) #Awkward code to get rid of the max and find the second max.
guess2 <- genres[which(log_probs == max(log_probs))]
if (length(guess2) > 1) guess2 <- sample(guess2, 1)
sorted <- sort(log_probs, decreasing=T)
if ((sorted[1] - sorted[2]) < withhold) {
questionable <- c(questionable, s)
next
}
test[s,'best'] <- guess
test[s,'best2'] <- guess2
}
conf <- table(test[,c('genre', 'best')])
acc <- sum(diag(conf)) / sum(conf) # calculation of the success rate
print(paste('first guess accuracy:',acc))
conf2 <- table(test[,c('genre','best2')])
acc2 <- sum(diag(conf2)) / sum(conf2) #  calculation of the success rate
print(paste('second guess accuracy:',acc2))
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
print(paste('# of songs withheld',length(questionable)))
print(questionable)
print(paste('# of songs with incomplete data',length(has.nas)))
print(has.nas)
}
test.train <- function(df, ntest=500)
{
test.idx <- sort(sample(dim(df)[1], ntest, replace=F))
test <- df[test.idx,]
train <- df[-test.idx,]
list(train=train, test=test)
}
classify.song <- function(data,train=df) {
names(data) <- attnames # This is already the case
lc_probs <- c()
for (g in genres) {
#get the density function for the genre, given attribute a (as a string or indesx 3:8)
d_gen <- function(a) density(df[which(df[,1] == g),a],na.rm=T)
ds <- sapply(attnames,d_gen) # the density objects for each attribute
dat <- data # just copying...
for (a in attnames){
dat[a] <- dens_fun(as.double(data[a]),ds[,a])
}
lc_prob <- sum(log(dat)) # log conditional probability
"print('probability of getting')
print(g)
print(exp(data+class.prop[g]))"
lc_probs <- c(lc_probs,g=(lc_prob+log(class.prop[g])))
}
post <- lc_probs # - log.sum(log.prob) #i'm taking this out for now cause its useless
return(post)
}
dens_fun <- function(i,d) {
idx <- which(abs(i-d$x) == min(abs(i-d$x)))
return(d$y[idx])
}
plot.confusion <- function(conf)
{
melted <- melt(conf, c("actual", "guess"))
p <- ggplot(data=melted, aes(x=actual, y=guess, size=value))
p <- p + geom_point(shape=15)
p <- p + scale_size_continuous(range=c(1,10))
p <- p + theme_bw() + theme(axis.text.x = element_text(angle=90))
p
}
d_gen <- function(a) density(df[which(df[,1] == g),a],na.rm=T)
ds <- sapply(attnames,d_gen) # the density objects for each attribute
#genreate each individual plot of density functions
for (a in attnames){
fun <- function(l) plot(density(l[,2],na.rm=T,),main=paste(l[1,1],a))
d_ply(df[,c('genre',a)],c('genre'),fun)
}
graph_gen <- function(a) {
g <- genres[1]
den <- density(df[(which(df[,1]==g)),a],na.rm=T)
plot(den,main=a)
for (g in genres[2:length(genres)]) {
den <- density(df[(which(df[,1]==g)),a],na.rm=T)
lines(den,col=colors[g])
}
}
colors <- c('black','red','cyan','blue','green')
names(colors) <- genres
colors
getwd()
setwd('/Users/Josh/cos424_final/')
setwd('/Users/Josh/cos424_final/conf_matrix/')
df = read.csv('concat.csv', as.is=T)
df
df[1:]
df[1,]
conf <- table(test[,c('original_chord', 'simple6')])
conf <- table(df[,c('original_chord', 'simple6')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
setwd('/Users/Josh/cos424_final/conf_matrix/')
df = read.csv('concat_no1000.csv.csv', as.is=T)
conf <- table(df[,c('original_chord', 'simple6')])
conf
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
df = read.csv('concat_no1000.csv.csv', as.is=T)
df = read.csv('concat_no1000.csv', as.is=T)
conf <- table(df[,c('original_chord', 'simple6')])
conf
conf <- table(df[,c('original_chord', 'simple6')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
df[1,]
conf <- table(df[,c('original_chord', 'viterbi4_chords')])
conf
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf8 <- table(df[,c('original_chord', 'viterbi4_chords')])
conf8.props <- aaply(conf8, 1, function (x) x / sum(x))
print(conf8.props)
plot.confusion(conf8.props)
df = read.csv('concat_BEST.csv', as.is=T)
conf <- table(df[,c('original_chord', 'viterbi4_chords')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
df[1,]
conf <- table(df[,c('original_chord', 'simple6CHORD')])
conf
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf <- table(df[,c('original_chord', 'simple1CHORD')])
conf <- table(df[,c('original_chord', 'simple1CHORD')])
conf
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf <- table(df[,c('original_chord', 'viterbi4CHORD')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf8 <- table(df[,c('original_chord', 'viterbi8_chords')])
conf8.props <- aaply(conf8, 1, function (x) x / sum(x))
print(conf8.props)
plot.confusion(conf8.props)
conf8 <- table(df[,c('original_chord', 'viterbi8_chords')])
conf <- table(df[,c('original_chord', 'viterbi4CHORD')])
conf <- table(df[,c('original_chord', 'viterbi8CHORD')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf8 <- table(df[,c('original_chord', 'viterbi8_chords')])
conf8.props <- aaply(conf8, 1, function (x) x / sum(x))
print(conf8.props)
plot.confusion(conf8.props)
conf <- table(df[,c('original_chord', 'CHORDSsimple2')])
conf <- table(df[,c('original_chord', 'CHORDsimple2')])
df[1:]
df[1,]
conf <- table(df[,c('original_chord', 'simple2CHORD')])
conf <- table(df[,c('original_chord', 'simple2CHORD')])
conf8 <- table(df[,c('original_chord', 'viterbi8_chords')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf <- table(df[,c('original_chord', 'simple1CHORD')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf <- table(df[,c('original_chord', 'simple6CHORD')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
conf <- table(df[,c('original_chord', 'simple6CHORD')])
conf.props <- aaply(conf, 1, function (x) x / sum(x))
print(conf.props)
plot.confusion(conf.props)
